Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', write a function to determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
 

Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "()[]{}"
Output: true

Example 3:
Input: s = "(]"
Output: false

Example 4:
Input: s = "([)]"
Output: false

Example 5:
Input: s = "{[]}"
Output: true
======================================================================================

function isValid(string) {
	const stack = [];
	for (const char of string) {
		if (isOpeningBracket(char)) {
			stack.push(char);
		} else if (isCompatibleBracket(char, stack)) {
			stack.pop();
		} else {
			return false;
		}
	}
	return stack.length === 0;
}
function isOpeningBracket(char) {
	return char === '(' ||
		char === '[' ||
		char === '{';
}
function isCompatibleBracket(char, stack) {
	const lastElement = stack[stack.length - 1];
	return (lastElement === '(' && char === ')') ||
		(lastElement === '[' && char === ']') ||
		(lastElement === '{' && char === '}');
}